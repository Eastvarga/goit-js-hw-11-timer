{"version":3,"sources":["webpack:///./index.js","webpack:///./js/timer.js"],"names":["timer","selector","targetDate","this","Math","floor","getTime","Date","now","_selector","name","_targetDate","date","refs","days","document","querySelector","hours","mins","secs","countDown","ref","textContent","setInterval"],"mappings":"2FAAA,4B,6LCwEMA,EAAQ,I,WAtCZ,cAAsC,IAAxBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WACtBC,KAAKF,SAAWA,EAChBE,KAAKD,WAAaA,E,oDAIlB,OAAOE,KAAKC,OACTF,KAAKD,WAAWI,UAAYC,KAAKC,OAAlC,S,4BAGA,OAAOJ,KAAKC,OAAQF,KAAKD,WAAWI,UAAYC,KAAKC,OAAlC,MAAD,Q,2BAGlB,OAAOJ,KAAKC,OAAQF,KAAKD,WAAWI,UAAYC,KAAKC,OAAlC,KAAD,O,2BAGlB,OAAOJ,KAAKC,OAAQF,KAAKD,WAAWI,UAAYC,KAAKC,OAAlC,IAA0D,O,+BAG7E,OAAOL,KAAKM,W,aAEHC,GACTP,KAAKM,UAAYC,I,iCAGjB,OAAOP,KAAKQ,a,aAEDC,GACVT,KAAKQ,YAAYC,O,gCAUV,CANM,CACZX,SAAU,WACVC,WAAY,IAAIK,KAAK,kBAgBvBM,EAAO,CACTC,KAAMC,SAASC,cAAchB,EAAMC,SAAS,wBAC5CgB,MAAOF,SAASC,cAAchB,EAAMC,SAAS,yBAC7CiB,KAAMH,SAASC,cAAchB,EAAMC,SAAS,wBAC5CkB,KAAMJ,SAASC,cAAchB,EAAMC,SAAS,yBAI1CmB,EAAY,WACd,IAAK,IAAMC,KAAOR,EACdA,EAAKQ,GAAKC,YAActB,EAAMqB,IAMtCD,IACgBG,YAAYH,EAAW,M","file":"main.b28416326295d4ec1168.js","sourcesContent":["import './sass/styles.scss';\nimport './js/timer';\n","// const targetTime = new Date('Jan 11, 2021');\r\n// const now = Date.now();\r\n// const time = targetTime - now;\r\n/* где time - разница между targetDate и текущей датой.\r\n * Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\r\n * миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\r\n */\r\n// const days = Math.floor(time / (1000 * 60 * 60 * 24));\r\n\r\n/*\r\n * Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\r\n * остатка % и делим его на количество миллисекунд в одном часе\r\n * (1000 * 60 * 60 = миллисекунды * минуты * секунды)\r\n */\r\n// const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n\r\n/*\r\n * Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\r\n * миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\r\n */\r\n// const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\r\n\r\n/*\r\n * Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\r\n * миллисекунд в одной секунде (1000)\r\n */\r\n// const secs = Math.floor((time % (1000 * 60)) / 1000);\r\n\r\n// new CountdownTimer({\r\n//     selector: '#timer-1',\r\n//     targetDate: new Date('Jul 17, 2019'),\r\n// });\r\n\r\nclass CountdownTimer {\r\n  constructor({ selector, targetDate,}) {\r\n    this.selector = selector;\r\n    this.targetDate = targetDate;\r\n    \r\n  }\r\n  get days() {\r\n    return Math.floor(\r\n      (this.targetDate.getTime() - Date.now()) / (1000 * 60 * 60 * 24));\r\n  }\r\n  get hours() {\r\n      return Math.floor(((this.targetDate.getTime() - Date.now()) % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n  }\r\n  get mins() {\r\n      return Math.floor(((this.targetDate.getTime() - Date.now()) % (1000 * 60 * 60)) / (1000 * 60));\r\n  }\r\n  get secs() {\r\n      return Math.floor(((this.targetDate.getTime() - Date.now()) % (1000 * 60)) / 1000);\r\n  }\r\n  get selector(){\r\n      return this._selector;\r\n  }\r\n  set selector(name){\r\n      this._selector = name;\r\n  }\r\n  get targetDate(){\r\n      return this._targetDate;\r\n  }\r\n  set targetDate(date){\r\n       this._targetDate=date;\r\n   }\r\n}\r\n\r\nconst targetTimer = {\r\n        selector: '#timer-1',\r\n        targetDate: new Date('Jan 12, 2021'),\r\n    }\r\n\r\n// const date = new Date('Jan 12, 2021');   \r\nconst timer = new CountdownTimer(targetTimer);\r\n// timer.selector = '#timer-2';\r\n// timer.targetDate=date;\r\n// console.dir(timer);\r\n// console.dir(targetTime);\r\n// console.dir(targetTime.getTime());\r\n// console.log(now);\r\n// console.log(time);\r\n// console.log(`Day: ${days} hours: ${hours} mins: ${mins} secs: ${secs}`);\r\n// console.log(`Day: ${timer.days} hours: ${timer.hours} mins: ${timer.mins} secs: ${timer.secs} selector: ${timer.selector} `);\r\n// console.dir(document.querySelector(timer.selector+' [data-value=\"days\"]'));\r\n\r\nconst refs = {\r\n    days: document.querySelector(timer.selector+' [data-value=\"days\"]'),\r\n    hours: document.querySelector(timer.selector+' [data-value=\"hours\"]'),\r\n    mins: document.querySelector(timer.selector+' [data-value=\"mins\"]'),\r\n    secs: document.querySelector(timer.selector+' [data-value=\"secs\"]'),\r\n}\r\n// console.dir(timer['days']);\r\n\r\nconst countDown = () =>{\r\n    for (const ref in refs){\r\n        refs[ref].textContent = timer[ref];\r\n        // console.dir(timer[ref]);\r\n        // console.dir(refs[ref].textContent);\r\n    }\r\n}\r\n// set time after page load then update every 1 sec\r\ncountDown();\r\nconst dayLast = setInterval(countDown, 1000);\r\n\r\n"],"sourceRoot":""}